{
	"name": "df_process_testing_data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_ecdc_raw_testing_data_csv",
						"type": "DatasetReference"
					},
					"name": "testingDataSource"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date_lookup",
						"type": "DatasetReference"
					},
					"name": "dimDateSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "dimCountrySource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_ecdc_raw_testing_data_csv",
						"type": "DatasetReference"
					},
					"name": "testingProcessedSink"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "selectColumnsToJoinDimDate"
				},
				{
					"name": "selectColumnsToJoinDimCountry"
				},
				{
					"name": "join2"
				},
				{
					"name": "selectToSink"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          year_week as string,",
				"          new_cases as string,",
				"          tests_done as string,",
				"          population as string,",
				"          testing_rate as string,",
				"          positivity_rate as string,",
				"          testing_data_source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> testingDataSource",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dimDateSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dimCountrySource",
				"testingDataSource, selectColumnsToJoinDimDate join(year_week == concat(concat(year,'-W'), lpad(week_of_year, 2, '0')),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"dimDateSource select(mapColumn(",
				"          date_key,",
				"          date,",
				"          year,",
				"          week_of_year",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumnsToJoinDimDate",
				"dimCountrySource select(mapColumn(",
				"          country_code_2_digit,",
				"          country_code_3_digit",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumnsToJoinDimCountry",
				"join1, selectColumnsToJoinDimCountry join(country_code == country_code_2_digit,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"aggregate1 select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          year_week,",
				"          week_start_date,",
				"          week_end_date,",
				"          new_cases,",
				"          tests_done,",
				"          population,",
				"          testing_rate,",
				"          positivity_rate,",
				"          testing_data_source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectToSink",
				"join2 aggregate(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          year_week,",
				"          new_cases,",
				"          tests_done,",
				"          population,",
				"          testing_rate,",
				"          positivity_rate,",
				"          testing_data_source),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> aggregate1",
				"selectToSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          country as string,",
				"          country_code as string,",
				"          year_week as string,",
				"          new_cases as string,",
				"          tests_done as string,",
				"          population as string,",
				"          testing_rate as string,",
				"          positivity_rate as string,",
				"          testing_data_source as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> testingProcessedSink"
			]
		}
	}
}